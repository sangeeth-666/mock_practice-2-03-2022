#include <stdio.h>
#include<stdlib.h>
int using_malloc(int n);
int using_calloc(int n);

int main()
{
    int n;
    int c;
    printf("enter the choice:");
    scanf("%d",&c);
    switch(c)
    {
        case 1:
        {
            using_malloc(n);
        }
        break;
        case 2:
        {
            using_calloc(n);
        }
        break;
        default:
        {
            printf("No options are avaliable again goto malloc:\n");
            using_malloc(n);
        }
    }
}
int using_malloc(int n)
{
    int i,*ptr;
     printf("enter the elements:");
    scanf("%d",&n);
    ptr=(int *)malloc(n*sizeof(int));//allocate memory on heap segment using malloc.
    if(ptr==NULL)//condition check if memory is allocate it returns address of the byte.
    {
        printf("memory is full:");
    }
    
    
    for(i=0;i<n;i++)//enter the values to store.
    {
        printf("enter the numbers:");
        scanf("%d",ptr+i);
    }
    
    for(i=0;i<n;i++)//print the address of each index.
    {
        printf("Address of frist element to last:%p\n",ptr+i);
    }
    
    
    for(i=0;i<n;i++)//whatever the values enter that will returns.
    {
        printf("\nvalues of an %d intergers:%d\n",n,ptr[i]);
    }
    
    printf("print all values from last to frist:");
    
    for(i=n-1;i>=0;i--)//print the values from last to frist
    {
        printf("\nreturn all the elements:%d\n",ptr[i]);
    }
    free(ptr);
}


/*-----using calloc funtion---*/

int using_calloc(int n)
{
    int i,*ptr;
     printf("enter the elements:");
    scanf("%d",&n);
    ptr=(int *)calloc(n,sizeof(int));//allocate memory on heap segment using calloc.
    if(ptr==NULL)//condition check if memory is allocate it returns address of the byte.
    {
        printf("memory is full:");
    }
    
    
    for(i=0;i<n;i++)//enter the values to store.
    {
        printf("enter the numbers:");
        scanf("%d",ptr+i);
    }
    
    for(i=0;i<n;i++)//print the address of each index.
    {
        printf("Address of frist element to last:%p\n",ptr+i);
    }
    
    
    for(i=0;i<n;i++)//whatever the values enter that will returns.
    {
        printf("\nvalues of an %d intergers:%d\n",n,ptr[i]);
    }
    
    printf("print all values from last to frist:");
    
    for(i=n-1;i>=0;i--)//print the values from last to frist
    {
        printf("\nreturn all the elements:%d\n",ptr[i]);
    }
    free(ptr);
}

